"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8633],{1360:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>g,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=n(4848),r=n(8453);const s={},t="Logging",a={id:"tutorial-ruby-couchbase-orm/logging",title:"Logging",description:"CouchbaseOrm provides a logging mechanism to help you monitor and debug your application. Logging allows you to capture important events, errors, and information during the execution of your application. CouchbaseOrm integrates with the logging framework used in your Ruby application, such as the built-in Logger class or third-party logging libraries.",source:"@site/docs/tutorial-ruby-couchbase-orm/12-logging.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/logging",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/logging",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/12-logging.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Encryption",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/encryption"},next:{title:"Testing",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/testing"}},g={},l=[{value:"12.1. Configuring Logging",id:"121-configuring-logging",level:2},{value:"12.2. Log Levels",id:"122-log-levels",level:2},{value:"12.3. Logging Messages",id:"123-logging-messages",level:2},{value:"12.4. Custom Logging",id:"124-custom-logging",level:2},{value:"12.5. Logging in Production",id:"125-logging-in-production",level:2},{value:"12.6. Logging Configuration per Environment",id:"126-logging-configuration-per-environment",level:2}];function c(e){const o={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.h1,{id:"logging",children:"Logging"}),"\n",(0,i.jsxs)(o.p,{children:["CouchbaseOrm provides a logging mechanism to help you monitor and debug your application. Logging allows you to capture important events, errors, and information during the execution of your application. CouchbaseOrm integrates with the logging framework used in your Ruby application, such as the built-in ",(0,i.jsx)(o.code,{children:"Logger"})," class or third-party logging libraries."]}),"\n",(0,i.jsx)(o.h2,{id:"121-configuring-logging",children:"12.1. Configuring Logging"}),"\n",(0,i.jsxs)(o.p,{children:["By default, CouchbaseOrm uses the ",(0,i.jsx)(o.code,{children:"Logger"})," class from the Ruby standard library for logging. The default log level is set to ",(0,i.jsx)(o.code,{children:"INFO"}),", which means that informational messages and above (warn, error, fatal) will be logged."]}),"\n",(0,i.jsxs)(o.p,{children:["You can configure the logger used by CouchbaseOrm by setting the ",(0,i.jsx)(o.code,{children:"logger"})," option:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:"CouchbaseOrm.configure do |config|\n  config.logger = Logger.new(STDOUT)\nend\n"})}),"\n",(0,i.jsxs)(o.p,{children:["In this example, we configure CouchbaseOrm to use a new instance of the ",(0,i.jsx)(o.code,{children:"Logger"})," class that logs messages to the standard output (STDOUT)."]}),"\n",(0,i.jsx)(o.p,{children:"You can also specify a different logger, such as a file logger or a third-party logging library:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:"CouchbaseOrm.configure do |config|\n  config.logger = Logger.new('couchbase_orm.log')\nend\n"})}),"\n",(0,i.jsxs)(o.p,{children:["This configuration sets the logger to write log messages to a file named ",(0,i.jsx)(o.code,{children:"couchbase_orm.log"}),"."]}),"\n",(0,i.jsx)(o.h2,{id:"122-log-levels",children:"12.2. Log Levels"}),"\n",(0,i.jsx)(o.p,{children:"CouchbaseOrm supports different log levels to control the verbosity of the logged messages. The available log levels, in increasing order of severity, are:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"DEBUG"}),": Detailed information, typically of interest only when diagnosing problems."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"INFO"}),": Confirmation that things are working as expected."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"WARN"}),": An indication that something unexpected happened or indicative of some problem in the near future."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"ERROR"}),": Due to a more serious problem, the software has not been able to perform some function."]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"FATAL"}),": A serious error, indicating that the program itself may be unable to continue running."]}),"\n"]}),"\n",(0,i.jsxs)(o.p,{children:["By default, CouchbaseOrm logs messages at the ",(0,i.jsx)(o.code,{children:"INFO"})," level and above. You can change the log level by setting the ",(0,i.jsx)(o.code,{children:"log_level"})," option:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:"CouchbaseOrm.configure do |config|\n  config.log_level = :debug\nend\n"})}),"\n",(0,i.jsxs)(o.p,{children:["In this example, we set the log level to ",(0,i.jsx)(o.code,{children:":debug"}),", which means that all log messages, including detailed debug information, will be logged."]}),"\n",(0,i.jsx)(o.h2,{id:"123-logging-messages",children:"12.3. Logging Messages"}),"\n",(0,i.jsx)(o.p,{children:"CouchbaseOrm logs various messages throughout its operation, such as database queries, document saves, and errors. These log messages provide insights into the behavior of your application and can be useful for debugging and monitoring purposes."}),"\n",(0,i.jsx)(o.p,{children:"Here are some examples of log messages generated by CouchbaseOrm:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:'[CouchbaseOrm] [INFO] Executing N1QL query: SELECT * FROM users WHERE type = \'User\' AND status = \'active\'\n[CouchbaseOrm] [DEBUG] Saving document: {"type":"User","name":"John Doe","email":"john@example.com"}\n[CouchbaseOrm] [ERROR] Error while saving document: Couchbase::Error::DocumentExists: The specified document already exists\n'})}),"\n",(0,i.jsx)(o.p,{children:"These log messages include the log level, the message itself, and any relevant contextual information."}),"\n",(0,i.jsx)(o.h2,{id:"124-custom-logging",children:"12.4. Custom Logging"}),"\n",(0,i.jsx)(o.p,{children:"In addition to the built-in logging provided by CouchbaseOrm, you can add your own custom log messages to provide application-specific logging."}),"\n",(0,i.jsxs)(o.p,{children:["You can access the configured logger using the ",(0,i.jsx)(o.code,{children:"CouchbaseOrm.logger"})," method and use it to log custom messages:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:'CouchbaseOrm.logger.info "User registration successful"\nCouchbaseOrm.logger.debug "User attributes: #{user.attributes}"\nCouchbaseOrm.logger.error "Failed to send email notification"\n'})}),"\n",(0,i.jsx)(o.p,{children:"By leveraging the configured logger, you can ensure that your custom log messages are logged consistently with the CouchbaseOrm log messages."}),"\n",(0,i.jsx)(o.h2,{id:"125-logging-in-production",children:"12.5. Logging in Production"}),"\n",(0,i.jsx)(o.p,{children:"In a production environment, it's important to consider the performance and storage implications of logging. Logging too much information or logging at a very detailed level can impact the performance of your application and consume significant storage space."}),"\n",(0,i.jsx)(o.p,{children:"Here are some best practices for logging in a production environment:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["Set the log level to ",(0,i.jsx)(o.code,{children:"INFO"})," or higher to avoid logging excessive debug information."]}),"\n",(0,i.jsx)(o.li,{children:"Use a rotating file logger or a log management service to prevent log files from growing too large."}),"\n",(0,i.jsx)(o.li,{children:"Monitor the log files regularly and set up alerts for critical errors or unusual patterns."}),"\n",(0,i.jsx)(o.li,{children:"Consider using a centralized logging solution to aggregate and analyze logs from multiple instances or services."}),"\n"]}),"\n",(0,i.jsx)(o.p,{children:"Remember, logs are not only useful for debugging but also for monitoring the health and performance of your application. By properly configuring and managing logging, you can gain valuable insights into the behavior of your application and quickly identify and resolve issues."}),"\n",(0,i.jsx)(o.h2,{id:"126-logging-configuration-per-environment",children:"12.6. Logging Configuration per Environment"}),"\n",(0,i.jsx)(o.p,{children:"In most applications, you'll want to have different logging configurations for different environments, such as development, testing, and production. CouchbaseOrm allows you to configure logging settings specific to each environment."}),"\n",(0,i.jsx)(o.p,{children:"For example, in a Rails application, you can configure logging in the respective environment configuration files:"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:"# config/environments/development.rb\nconfig.couchbase_orm.logger = Logger.new(STDOUT)\nconfig.couchbase_orm.log_level = :debug\n\n# config/environments/production.rb\nconfig.couchbase_orm.logger = Logger.new('log/couchbase_orm.log', 10, 100.megabytes)\nconfig.couchbase_orm.log_level = :info\n"})}),"\n",(0,i.jsxs)(o.p,{children:["In this example, the development environment logs to the standard output with a log level of ",(0,i.jsx)(o.code,{children:":debug"}),", while the production environment logs to a file with log rotation and a log level of ",(0,i.jsx)(o.code,{children:":info"}),"."]}),"\n",(0,i.jsx)(o.p,{children:"By configuring logging per environment, you can ensure that you have the appropriate level of logging for each environment, balancing the need for detailed information during development and the performance and storage considerations in production."}),"\n",(0,i.jsx)(o.p,{children:"Logging is an essential tool for monitoring, debugging, and understanding the behavior of your application. CouchbaseOrm provides a flexible logging mechanism that integrates with the logging framework of your choice, allowing you to capture and analyze important events and information throughout your application's lifecycle."}),"\n",(0,i.jsx)(o.p,{children:"In the next section, we'll explore testing with CouchbaseOrm and how you can write effective tests for your models and queries."})]})}function u(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function t(e){const o=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:o},e.children)}}}]);