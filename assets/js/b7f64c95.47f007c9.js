"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6195],{3664:(e,d,n)=>{n.r(d),n.d(d,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>i});var t=n(4848),s=n(8453);const r={sidebar_position:"09"},a="Embedded Documents",o={id:"tutorial-ruby-couchbase-orm/embedded-documents",title:"Embedded Documents",description:"CouchbaseOrm supports embedded documents, which allow you to store complex, hierarchical data structures within a single Couchbase document. Embedded documents are useful when you have related data that you want to store together with the parent document for performance or consistency reasons.",source:"@site/docs/tutorial-ruby-couchbase-orm/09-embedded-documents.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/embedded-documents",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/embedded-documents",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/09-embedded-documents.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/views"},next:{title:"Enums",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/enums"}},c={},i=[{value:"9.1. Defining Embedded Documents",id:"91-defining-embedded-documents",level:2},{value:"9.2. Embedding Documents",id:"92-embedding-documents",level:2},{value:"9.3. Accessing Embedded Documents",id:"93-accessing-embedded-documents",level:2},{value:"9.4. Updating Embedded Documents",id:"94-updating-embedded-documents",level:2},{value:"9.5. Embedding Multiple Documents",id:"95-embedding-multiple-documents",level:2},{value:"9.6. Querying Embedded Documents",id:"96-querying-embedded-documents",level:2},{value:"9.7. Validating Embedded Documents",id:"97-validating-embedded-documents",level:2}];function u(e){const d={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(d.h1,{id:"embedded-documents",children:"Embedded Documents"}),"\n",(0,t.jsx)(d.p,{children:"CouchbaseOrm supports embedded documents, which allow you to store complex, hierarchical data structures within a single Couchbase document. Embedded documents are useful when you have related data that you want to store together with the parent document for performance or consistency reasons."}),"\n",(0,t.jsx)(d.h2,{id:"91-defining-embedded-documents",children:"9.1. Defining Embedded Documents"}),"\n",(0,t.jsxs)(d.p,{children:["To define an embedded document, you create a new class that inherits from ",(0,t.jsx)(d.code,{children:"CouchbaseOrm::EmbeddedDocument"}),"."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"class Address < CouchbaseOrm::EmbeddedDocument\n  attribute :street, :string\n  attribute :city, :string\n  attribute :country, :string\nend\n\nclass User < CouchbaseOrm::Base\n  attribute :name, :string\n  attribute :email, :string\n  attribute :address, Address\nend\n"})}),"\n",(0,t.jsxs)(d.p,{children:["In this example, we define an ",(0,t.jsx)(d.code,{children:"Address"})," class as an embedded document and include it as an attribute in the ",(0,t.jsx)(d.code,{children:"User"})," model using the ",(0,t.jsx)(d.code,{children:"attribute"})," method."]}),"\n",(0,t.jsx)(d.h2,{id:"92-embedding-documents",children:"9.2. Embedding Documents"}),"\n",(0,t.jsx)(d.p,{children:"To embed a document within a parent document, you can assign an instance of the embedded document class to the corresponding attribute."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"user = User.new(name: 'John Doe', email: 'john@example.com')\nuser.address = Address.new(street: '123 Main St', city: 'New York', country: 'USA')\nuser.save\n"})}),"\n",(0,t.jsxs)(d.p,{children:["When saving the parent document (",(0,t.jsx)(d.code,{children:"User"})," in this case), CouchbaseOrm automatically serializes the embedded document (",(0,t.jsx)(d.code,{children:"Address"}),") and stores it as a nested object within the parent document."]}),"\n",(0,t.jsx)(d.h2,{id:"93-accessing-embedded-documents",children:"9.3. Accessing Embedded Documents"}),"\n",(0,t.jsx)(d.p,{children:"To access an embedded document, you can simply call the corresponding attribute on the parent document."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"user = User.find('user_id')\naddress = user.address\nputs address.street\n"})}),"\n",(0,t.jsx)(d.p,{children:"CouchbaseOrm automatically deserializes the embedded document and returns an instance of the embedded document class."}),"\n",(0,t.jsx)(d.h2,{id:"94-updating-embedded-documents",children:"9.4. Updating Embedded Documents"}),"\n",(0,t.jsx)(d.p,{children:"To update an embedded document, you can modify the attributes of the embedded document instance and save the parent document."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"user = User.find('user_id')\nuser.address.city = 'Los Angeles'\nuser.save\n"})}),"\n",(0,t.jsx)(d.p,{children:"CouchbaseOrm will serialize the updated embedded document and save it along with the parent document."}),"\n",(0,t.jsx)(d.h2,{id:"95-embedding-multiple-documents",children:"9.5. Embedding Multiple Documents"}),"\n",(0,t.jsx)(d.p,{children:"You can also embed multiple documents within a parent document using an array attribute."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  attribute :name, :string\n  attribute :email, :string\n  attribute :addresses, :array, type: Address\nend\n\nuser = User.new(name: 'John Doe', email: 'john@example.com')\nuser.addresses = [\n  Address.new(street: '123 Main St', city: 'New York', country: 'USA'),\n  Address.new(street: '456 Oak St', city: 'San Francisco', country: 'USA')\n]\nuser.save\n"})}),"\n",(0,t.jsxs)(d.p,{children:["In this example, the ",(0,t.jsx)(d.code,{children:"User"})," model has an ",(0,t.jsx)(d.code,{children:"addresses"})," attribute that is an array of ",(0,t.jsx)(d.code,{children:"Address"})," embedded documents. You can assign an array of ",(0,t.jsx)(d.code,{children:"Address"})," instances to the ",(0,t.jsx)(d.code,{children:"addresses"})," attribute and save the parent document."]}),"\n",(0,t.jsx)(d.h2,{id:"96-querying-embedded-documents",children:"9.6. Querying Embedded Documents"}),"\n",(0,t.jsx)(d.p,{children:"CouchbaseOrm allows you to query embedded documents using dot notation and attribute conditions."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"users = User.where('address.city': 'New York')\n"})}),"\n",(0,t.jsxs)(d.p,{children:["This query retrieves all users who have an embedded ",(0,t.jsx)(d.code,{children:"Address"})," document with the ",(0,t.jsx)(d.code,{children:"city"})," attribute set to ",(0,t.jsx)(d.code,{children:"'New York'"}),"."]}),"\n",(0,t.jsx)(d.p,{children:"You can also query embedded documents within an array attribute."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"users = User.where('addresses.country': 'USA')\n"})}),"\n",(0,t.jsxs)(d.p,{children:["This query retrieves all users who have at least one embedded ",(0,t.jsx)(d.code,{children:"Address"})," document with the ",(0,t.jsx)(d.code,{children:"country"})," attribute set to ",(0,t.jsx)(d.code,{children:"'USA'"}),"."]}),"\n",(0,t.jsx)(d.h2,{id:"97-validating-embedded-documents",children:"9.7. Validating Embedded Documents"}),"\n",(0,t.jsx)(d.p,{children:"CouchbaseOrm allows you to validate embedded documents along with the parent document."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ruby",children:"class Address < CouchbaseOrm::EmbeddedDocument\n  attribute :street, :string\n  attribute :city, :string\n  attribute :country, :string\n\n  validates :street, :city, :country, presence: true\nend\n\nclass User < CouchbaseOrm::Base\n  attribute :name, :string\n  attribute :email, :string\n  attribute :address, Address\n\n  validates :address, presence: true\nend\n"})}),"\n",(0,t.jsxs)(d.p,{children:["In this example, we define validations for the ",(0,t.jsx)(d.code,{children:"Address"})," embedded document, ensuring that the ",(0,t.jsx)(d.code,{children:"street"}),", ",(0,t.jsx)(d.code,{children:"city"}),", and ",(0,t.jsx)(d.code,{children:"country"})," attributes are present. We also add a validation to the ",(0,t.jsx)(d.code,{children:"User"})," model to ensure that the ",(0,t.jsx)(d.code,{children:"address"})," attribute is present."]}),"\n",(0,t.jsxs)(d.p,{children:["When saving a ",(0,t.jsx)(d.code,{children:"User"})," document, CouchbaseOrm will validate both the parent document and the embedded ",(0,t.jsx)(d.code,{children:"Address"})," document. If any validation fails, the parent document will not be saved, and validation errors will be added to the parent document."]}),"\n",(0,t.jsx)(d.p,{children:"Embedded documents provide a powerful way to model complex data structures and relationships within a single Couchbase document. They allow you to store related data together, improving performance and reducing the need for separate queries to retrieve associated data."}),"\n",(0,t.jsx)(d.p,{children:"However, it's important to consider the trade-offs when using embedded documents. Embedding too much data within a single document can lead to large document sizes and potential performance issues. It's recommended to use embedded documents judiciously and to consider the access patterns and data relationships of your application."}),"\n",(0,t.jsx)(d.p,{children:"In the next section, we'll explore enums in CouchbaseOrm and how they can be used to define a fixed set of values for an attribute."})]})}function m(e={}){const{wrapper:d}={...(0,s.R)(),...e.components};return d?(0,t.jsx)(d,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,d,n)=>{n.d(d,{R:()=>a,x:()=>o});var t=n(6540);const s={},r=t.createContext(s);function a(e){const d=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function o(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:d},e.children)}}}]);