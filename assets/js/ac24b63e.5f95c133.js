"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[350],{6404:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var t=r(4848),o=r(8453);const a={},s="Querying",i={id:"tutorial-ruby-couchbase-orm/querying",title:"Querying",description:"CouchbaseOrm provides a powerful and expressive query interface for retrieving data from Couchbase Server. With CouchbaseOrm, you can easily construct queries using a fluent and intuitive API that resembles the querying capabilities of ActiveRecord.",source:"@site/docs/tutorial-ruby-couchbase-orm/04-querying.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/querying",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/querying",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/04-querying.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Defining Models",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/defining-models"},next:{title:"Persistence",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/persistence"}},c={},u=[{value:"4.1. Finding Records",id:"41-finding-records",level:2},{value:"4.2. Where Clauses",id:"42-where-clauses",level:2},{value:"4.3. Ordering",id:"43-ordering",level:2},{value:"4.4. Pluck",id:"44-pluck",level:2},{value:"4.5. Destroying Records",id:"45-destroying-records",level:2},{value:"4.6. Scopes",id:"46-scopes",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"querying",children:"Querying"}),"\n",(0,t.jsx)(n.p,{children:"CouchbaseOrm provides a powerful and expressive query interface for retrieving data from Couchbase Server. With CouchbaseOrm, you can easily construct queries using a fluent and intuitive API that resembles the querying capabilities of ActiveRecord."}),"\n",(0,t.jsx)(n.h2,{id:"41-finding-records",children:"4.1. Finding Records"}),"\n",(0,t.jsx)(n.p,{children:"CouchbaseOrm offers various methods to find records based on different criteria. Here are some commonly used methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"find"}),": Finds a record by its primary key (ID)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"find_by"}),": Finds the first record that matches the specified attribute-value pair."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"where"}),": Retrieves records that match the specified conditions."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here are some examples of finding records:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Define an Author model\nclass Author < CouchbaseOrm::Base\n  attribute :name, :string\n  attribute :age, :integer\n  attribute :active, :boolean, default: true\n\n  validates :name, presence: true\n  validates :age, numericality: { greater_than_or_equal_to: 18 }\n\nend\n\n# Create new authors\nauthor1 = Author.new(name: 'John Doe', age: 30, active: true)\nauthor2 = Author.new(name: 'Jane Smith', age: 25, active: false)\nauthor3 = Author.new(name: 'Alice Brown', age: 40, active: true)\nauthor4 = Author.new(name: 'Bob Johnson', age: 17, active: true)\n\n# Save authors\nauthor1.save\nauthor2.save\nauthor3.save\nauthor4.save\n\n# Find authors by ID\nputs \"Find by ID:\"\nputs Author.find(author1.id).inspect\n\n# Find the first author with a specific name\nputs \"\\nFind by name:\"\nputs Author.find_by(name: 'John Doe').inspect\n\n# Where\nputs \"\\nWhere:\"\nputs Author.where(active: true).to_a.inspect\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output of the above code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Find by ID:\n#<Author id: "author-1-tIqa9xA5k", name: "John Doe", age: 30, active: true>\n\nFind by name:\n#<Author id: "author-1-tIqa9xA5k", name: "John Doe", age: 30, active: true>\n\nWhere:\n[#<Author id: "author-1-tIqa9xA5k", name: "John Doe", age: 30, active: true>, #<Author id: "author-1-tIqaAdJC-", name: "Alice Brown", age: 40, active: true>]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"42-where-clauses",children:"4.2. Where Clauses"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"where"})," method allows you to specify conditions to filter the records based on attribute values. You can chain multiple ",(0,t.jsx)(n.code,{children:"where"})," clauses together to build more complex queries."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Where\nputs "\\nWhere chain:"\nputs Author.where(active: true).where(\'age >= 30\').to_a.inspect\n\nputs "\\nWhere with regex:"\nputs Author.where("name like \'%John%\'").to_a.inspect\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Where chain:\n[#<Author id: "author-1-tJFHUZcxT", name: "John Doe", age: 30, active: true>, #<Author id: "author-1-tJFHWh88k", name: "Alice Brown", age: 40, active: true>]\n\nWhere with regex:\n[#<Author id: "author-1-tJFHUZcxT", name: "John Doe", age: 30, active: true>]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["CouchbaseOrm supports various comparison operators and placeholders in the ",(0,t.jsx)(n.code,{children:"where"})," clauses, such as ",(0,t.jsx)(n.code,{children:"="}),", ",(0,t.jsx)(n.code,{children:">"}),", ",(0,t.jsx)(n.code,{children:"<"}),", ",(0,t.jsx)(n.code,{children:">="}),", ",(0,t.jsx)(n.code,{children:"<="}),", ",(0,t.jsx)(n.code,{children:"LIKE"}),", and more."]}),"\n",(0,t.jsx)(n.h2,{id:"43-ordering",children:"4.3. Ordering"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify the order in which the retrieved records should be sorted using the ",(0,t.jsx)(n.code,{children:"order"})," method. Pass the attribute name and the desired sort direction (",(0,t.jsx)(n.code,{children:":asc"})," for ascending, ",(0,t.jsx)(n.code,{children:":desc"})," for descending)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Order authors by name\nputs "\\nOrder by name:"\nputs Author.order(:name).to_a.inspect\n\n# Order authors by age in descending order\nputs "\\nOrder by age (descending):"\nputs Author.order(age: :desc).to_a.inspect\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Order by name:\n[#<Author id: "author-1-tJFHWh88k", name: "Alice Brown", age: 40, active: true>, #<Author id: "author-1-tJFHW6h7V", name: "Jane Smith", age: 25, active: false>, #<Author id: "author-1-tJFHUZcxT", name: "John Doe", age: 30, active: true>]\n\nOrder by age (descending):\n[#<Author id: "author-1-tJFHWh88k", name: "Alice Brown", age: 40, active: true>, #<Author id: "author-1-tJFHUZcxT", name: "John Doe", age: 30, active: true>, #<Author id: "author-1-tJFHW6h7V", name: "Jane Smith", age: 25, active: false>]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can also chain multiple ",(0,t.jsx)(n.code,{children:"order"})," clauses to sort by multiple attributes."]}),"\n",(0,t.jsx)(n.p,{children:"Scopes provide a clean and DRY way to encapsulate commonly used query conditions."}),"\n",(0,t.jsx)(n.h2,{id:"44-pluck",children:"4.4. Pluck"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pluck"})," method allows you to retrieve specific attributes from the matched records instead of loading the entire objects. It returns an array of values for the specified attributes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Pluck names of all authors\nputs "\\nPluck names:"\nputs Author.order(:name).pluck(:name).inspect\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Pluck names:\n["Alice Brown", "Jane Smith", "John Doe"]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"45-destroying-records",children:"4.5. Destroying Records"}),"\n",(0,t.jsxs)(n.p,{children:["To delete multiple records that match specific conditions, you can use the ",(0,t.jsx)(n.code,{children:".each(&:destroy)"})," method. It deletes the records from the database and returns the number of records deleted."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Destroy all inactive authors\nputs "\\nDestroy all inactive authors:"\nauthors = Author.where(active: false).to_a\nputs authors.inspect\nAuthor.where(active: false).each(&:destroy)\n\n# Check remaining authors\nputs "\\nRemaining authors:"\nputs Author.all.to_a.inspect\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Remaining authors:\n[#<Author id: "author-1-tK5S-hJY3", name: "Alice Brown", age: 40, active: true>, #<Author id: "author-1-tK5SzrgQL", name: "John Doe", age: 30, active: true>]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Be cautious when using ",(0,t.jsx)(n.code,{children:".each(&:destroy)"})," as it permanently deletes the matched records from the database."]}),"\n",(0,t.jsx)(n.p,{children:"These are just a few examples of the querying capabilities provided by CouchbaseOrm. You can combine these methods in various ways to construct complex and specific queries based on your application's requirements."}),"\n",(0,t.jsx)(n.p,{children:"In the next section, we'll explore how to use CouchbaseOrm to create, update, and delete records in Couchbase Server."}),"\n",(0,t.jsx)(n.h2,{id:"46-scopes",children:"4.6. Scopes"}),"\n",(0,t.jsx)(n.p,{children:"Scopes allow you to define reusable query snippets that can be chained with other query methods. Scopes are defined as class methods within your model."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Define a Comment model\nclass Comment < CouchbaseOrm::Base\n  attribute :title, :string\n  attribute :author, :string\n  attribute :category, :string\n  attribute :ratings, :integer\n\n  def self.by_author(author)\n    where(author: author)\n  end\n\n  def self.highly_rated\n    where('ratings > 3')\n  end\n\n  def self.in_category(category)\n    where(category: category)\n  end\nend\n\n\n# Create some comments\ncomment1 = Comment.new(title: 'First Comment', author: 'Anne McCaffrey', category: 'S-F', ratings: 5)\ncomment2 = Comment.new(title: 'Second Comment', author: 'Anne McCaffrey', category: 'S-F', ratings: 4)\ncomment3 = Comment.new(title: 'Third Comment', author: 'Anne McCaffrey', category: 'S-F', ratings: 3)\ncomment4 = Comment.new(title: 'Fourth Comment', author: 'Anne McCaffrey', category: 'S-F', ratings: 2)\n\n# Save the comments\ncomment1.save\ncomment2.save\ncomment3.save\ncomment4.save\n\n# Example usage of scopes\ncomments = Comment.by_author(\"Anne McCaffrey\").in_category('S-F').highly_rated.order(:title).limit(10)\n\n# Iterate over the comments\ncomments.each do |comment|\n  puts \"Title: #{comment.title}, Author: #{comment.author}, Category: #{comment.category}, Ratings: #{comment.ratings}\"\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Title: First Comment, Author: Anne McCaffrey, Category: S-F, Ratings: 5\nTitle: Second Comment, Author: Anne McCaffrey, Category: S-F, Ratings: 4\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);