"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[429],{9406:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var t=s(4848),r=s(8453);const o={},i="Testing",a={id:"tutorial-ruby-couchbase-orm/testing",title:"Testing",description:"Testing is an essential part of developing robust and maintainable applications. CouchbaseOrm provides support for testing your models and queries to ensure they behave as expected. In this section, we'll explore how to set up and write tests for your CouchbaseOrm-based application.",source:"@site/docs/tutorial-ruby-couchbase-orm/13-testing.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/testing",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/13-testing.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/logging"},next:{title:"Troubleshooting",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/troubleshooting"}},c={},u=[{value:"13.1. Setup",id:"131-setup",level:2},{value:"13.2. Model Tests",id:"132-model-tests",level:2},{value:"13.3. Query Tests",id:"133-query-tests",level:2},{value:"13.4. Mocking Couchbase Responses",id:"134-mocking-couchbase-responses",level:2},{value:"13.5. Test Helpers",id:"135-test-helpers",level:2},{value:"13.6. Continuous Integration",id:"136-continuous-integration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"Travis CI",id:"travis-ci",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:"Testing is an essential part of developing robust and maintainable applications. CouchbaseOrm provides support for testing your models and queries to ensure they behave as expected. In this section, we'll explore how to set up and write tests for your CouchbaseOrm-based application."}),"\n",(0,t.jsx)(n.h2,{id:"131-setup",children:"13.1. Setup"}),"\n",(0,t.jsx)(n.p,{children:"To start testing your CouchbaseOrm models, you'll need to set up your test environment. Here are the steps to get started:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Install testing dependencies"}),": Make sure you have the necessary testing dependencies installed. If you're using RSpec, you'll need to add the ",(0,t.jsx)(n.code,{children:"rspec"})," gem to your Gemfile:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"group :test do\n  gem 'rspec'\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"bundle install"})," to install the gem."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Configure test environment"}),": Create a configuration file for your test environment, specifying the Couchbase connection details and any other relevant settings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# config/couchbase.yml\ntest:\n  host: localhost\n  bucket: my_app_test\n  username: my_username\n  password: my_password\n"})}),"\n",(0,t.jsx)(n.p,{children:"Make sure to use a separate bucket for testing to avoid modifying your development or production data."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Initialize CouchbaseOrm"}),": In your test setup, initialize CouchbaseOrm with the test configuration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/spec_helper.rb\nrequire 'couchbase-orm'\n\nCouchbaseOrm.configure do |config|\n  config.load_config(File.join(File.dirname(__FILE__), '..', 'config', 'couchbase.yml'), :test)\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This code loads the Couchbase configuration from the ",(0,t.jsx)(n.code,{children:"config/couchbase.yml"})," file for the test environment."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"132-model-tests",children:"13.2. Model Tests"}),"\n",(0,t.jsx)(n.p,{children:"Testing your CouchbaseOrm models involves verifying the behavior of your model classes, including attribute definitions, validations, callbacks, and associations. Here's an example of testing a simple model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/models/user_spec.rb\nrequire 'spec_helper'\n\nRSpec.describe User do\n  describe 'validations' do\n    it 'requires a name' do\n      user = User.new(email: 'john@example.com')\n      expect(user).to_not be_valid\n      expect(user.errors[:name]).to include(\"can't be blank\")\n    end\n\n    it 'requires a valid email' do\n      user = User.new(name: 'John Doe', email: 'invalid_email')\n      expect(user).to_not be_valid\n      expect(user.errors[:email]).to include('is invalid')\n    end\n  end\n\n  describe 'callbacks' do\n    it 'sets the status to active before saving' do\n      user = User.new(name: 'John Doe', email: 'john@example.com')\n      expect(user.status).to be_nil\n      user.save\n      expect(user.status).to eq('active')\n    end\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we test the validations and callbacks of the ",(0,t.jsx)(n.code,{children:"User"})," model. We create instances of the model with different attributes and assert the expected behavior, such as validation errors and callback side effects."]}),"\n",(0,t.jsx)(n.h2,{id:"133-query-tests",children:"13.3. Query Tests"}),"\n",(0,t.jsx)(n.p,{children:"Testing queries involves verifying that your CouchbaseOrm queries return the expected results. Here's an example of testing a query:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/queries/active_users_spec.rb\nrequire 'spec_helper'\n\nRSpec.describe 'Active Users Query' do\n  let!(:active_user) { User.create(name: 'John', status: 'active') }\n  let!(:inactive_user) { User.create(name: 'Jane', status: 'inactive') }\n\n  it 'returns only active users' do\n    active_users = User.where(status: 'active')\n    expect(active_users).to include(active_user)\n    expect(active_users).to_not include(inactive_user)\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we create test data by creating instances of the ",(0,t.jsx)(n.code,{children:"User"})," model with different statuses. We then execute the query to retrieve active users and assert that the query returns the expected results."]}),"\n",(0,t.jsx)(n.h2,{id:"134-mocking-couchbase-responses",children:"13.4. Mocking Couchbase Responses"}),"\n",(0,t.jsx)(n.p,{children:"In some cases, you may want to mock the responses from Couchbase to isolate your tests from the actual database. CouchbaseOrm integrates with popular mocking libraries like RSpec Mocks, allowing you to stub Couchbase responses."}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of mocking a Couchbase response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/models/user_spec.rb\nrequire 'spec_helper'\n\nRSpec.describe User do\n  describe '#find' do\n    it 'returns the user when found' do\n      user_data = { 'name' => 'John Doe', 'email' => 'john@example.com' }\n      allow(CouchbaseOrm::Connection.bucket).to receive(:get).with('user_1').and_return(user_data)\n\n      user = User.find('user_1')\n      expect(user.name).to eq('John Doe')\n      expect(user.email).to eq('john@example.com')\n    end\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we use RSpec Mocks to stub the ",(0,t.jsx)(n.code,{children:"CouchbaseOrm::Connection.bucket.get"})," method and return a predefined user data hash. This allows us to test the ",(0,t.jsx)(n.code,{children:"find"})," method without actually querying the Couchbase database."]}),"\n",(0,t.jsx)(n.h2,{id:"135-test-helpers",children:"13.5. Test Helpers"}),"\n",(0,t.jsx)(n.p,{children:"To make your tests more readable and maintainable, you can create test helpers that encapsulate common setup or assertions. Here's an example of a test helper:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/support/model_helpers.rb\nmodule ModelHelpers\n  def create_user(attributes = {})\n    User.create({\n      name: 'John Doe',\n      email: 'john@example.com',\n      status: 'active'\n    }.merge(attributes))\n  end\nend\n\nRSpec.configure do |config|\n  config.include ModelHelpers\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we define a ",(0,t.jsx)(n.code,{children:"create_user"})," helper method that creates a ",(0,t.jsx)(n.code,{children:"User"})," instance with default attributes and merges any provided attributes. We then include this helper module in our RSpec configuration, making it available in all our tests."]}),"\n",(0,t.jsx)(n.p,{children:"With test helpers, you can DRY up your test code and make it more expressive:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# spec/models/user_spec.rb\nrequire 'spec_helper'\n\nRSpec.describe User do\n  describe '#name' do\n    it 'returns the user name' do\n      user = create_user(name: 'Jane Doe')\n      expect(user.name).to eq('Jane Doe')\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"136-continuous-integration",children:"13.6. Continuous Integration"}),"\n",(0,t.jsx)(n.p,{children:"To ensure the reliability and maintainability of your CouchbaseOrm-based application, it's recommended to set up continuous integration (CI) for running your tests automatically on each code change."}),"\n",(0,t.jsx)(n.p,{children:"Popular CI services like Travis CI, CircleCI, or GitHub Actions can be easily integrated with your project. They can automatically run your test suite, report test results, and notify you of any failures."}),"\n",(0,t.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,t.jsx)(n.p,{children:"GitHub Actions is a popular CI/CD platform that integrates seamlessly with GitHub repositories. It allows you to define workflows that automatically run your tests, perform code analysis, and deploy your application."}),"\n",(0,t.jsx)(n.p,{children:"Here's an example configuration for GitHub Actions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.7\n\n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libcouchbase-dev\n          gem install bundler\n          bundle install --jobs 4 --retry 3\n\n      - name: Set up Couchbase\n        run: |\n          curl -O http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-amd64.deb\n          sudo dpkg -i couchbase-release-1.0-amd64.deb\n          sudo apt-get update\n          sudo apt-get install -y couchbase-server\n\n      - name: Start Couchbase\n        run: sudo systemctl start couchbase-server\n\n      - name: Run tests\n        run: bundle exec rspec\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This GitHub Actions workflow defines a job named ",(0,t.jsx)(n.code,{children:"test"})," that runs on Ubuntu. It performs the following steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Checks out the code from the repository."}),"\n",(0,t.jsxs)(n.li,{children:["Sets up the specified Ruby version using the ",(0,t.jsx)(n.code,{children:"ruby/setup-ruby"})," action."]}),"\n",(0,t.jsxs)(n.li,{children:["Installs the required dependencies, including ",(0,t.jsx)(n.code,{children:"libcouchbase-dev"})," and the project's gems using Bundler."]}),"\n",(0,t.jsx)(n.li,{children:"Sets up Couchbase Server by downloading and installing the necessary packages."}),"\n",(0,t.jsx)(n.li,{children:"Starts the Couchbase Server service."}),"\n",(0,t.jsxs)(n.li,{children:["Runs the RSpec tests using the ",(0,t.jsx)(n.code,{children:"bundle exec rspec"})," command."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This workflow will be triggered on every push to the ",(0,t.jsx)(n.code,{children:"main"})," branch and every pull request targeting the ",(0,t.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,t.jsxs)(n.p,{children:["To use this workflow, create a new file named ",(0,t.jsx)(n.code,{children:"ci.yml"})," in the ",(0,t.jsx)(n.code,{children:".github/workflows"})," directory of your project and copy the above configuration."]}),"\n",(0,t.jsx)(n.p,{children:"GitHub Actions provides a wide range of options and integrations, allowing you to customize your CI/CD pipeline according to your project's needs. You can add additional steps for code coverage reporting, linting, or deploying your application to various environments."}),"\n",(0,t.jsx)(n.p,{children:"By setting up continuous integration with GitHub Actions, you can automatically run your tests on each code change, ensuring that your CouchbaseOrm-based application remains stable and reliable."}),"\n",(0,t.jsx)(n.p,{children:"Remember to configure your Couchbase connection details and any other necessary environment variables in the GitHub Actions secrets to keep sensitive information secure."}),"\n",(0,t.jsx)(n.p,{children:"With continuous integration in place, you can catch issues early, maintain code quality, and deploy your application with confidence."}),"\n",(0,t.jsx)(n.h3,{id:"travis-ci",children:"Travis CI"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example configuration for Travis CI:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# .travis.yml\nlanguage: ruby\nrvm:\n  - 2.7\nservices:\n  - couchbase\nbefore_script:\n  - curl -O http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-amd64.deb\n  - sudo dpkg -i couchbase-release-1.0-amd64.deb\n  - sudo apt-get update\n  - sudo apt-get install couchbase-server\n  - sudo systemctl start couchbase-server\nscript:\n  - bundle exec rspec\n"})}),"\n",(0,t.jsx)(n.p,{children:"This configuration sets up a Ruby environment, installs Couchbase Server, and runs your RSpec tests on each build."}),"\n",(0,t.jsx)(n.p,{children:"Testing is crucial for ensuring the correctness and reliability of your CouchbaseOrm-based application. By writing comprehensive tests for your models, queries, and interactions with Couchbase, you can catch bugs early, prevent regressions, and maintain a high-quality codebase."}),"\n",(0,t.jsx)(n.p,{children:"In the next section, we'll explore advanced topics in CouchbaseOrm, such as transactions, concurrency, and error handling."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);