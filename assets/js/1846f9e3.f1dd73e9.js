"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[341],{2770:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var n=r(4848),a=r(8453);const t={sidebar_position:5},c="Persistence",o={id:"tutorial-ruby-couchbase-orm/persistence",title:"Persistence",description:"CouchbaseOrm provides a simple and intuitive way to persist data to Couchbase Server. With CouchbaseOrm, you can easily create, update, save, and destroy records using a set of built-in methods.",source:"@site/docs/tutorial-ruby-couchbase-orm/05-persistence.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/persistence",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/persistence",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/05-persistence.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Querying",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/querying"},next:{title:"Associations and Validations",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/associations-and-validations"}},i={},d=[{value:"5.1. Creating Records",id:"51-creating-records",level:2},{value:"5.2. Updating Records",id:"52-updating-records",level:2},{value:"5.3. Saving Records",id:"53-saving-records",level:2},{value:"5.4. Destroying Records",id:"54-destroying-records",level:2},{value:"5.5. Updating Specific Fields",id:"55-updating-specific-fields",level:2},{value:"5.6. Callbacks",id:"56-callbacks",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"persistence",children:"Persistence"}),"\n",(0,n.jsx)(s.p,{children:"CouchbaseOrm provides a simple and intuitive way to persist data to Couchbase Server. With CouchbaseOrm, you can easily create, update, save, and destroy records using a set of built-in methods."}),"\n",(0,n.jsx)(s.h2,{id:"51-creating-records",children:"5.1. Creating Records"}),"\n",(0,n.jsxs)(s.p,{children:["To create a new record, you can instantiate a new instance of your model class and then call the ",(0,n.jsx)(s.code,{children:"save"})," method to persist it to the database."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.new(name: 'John', email: 'john@example.com')\nuser.save\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Alternatively, you can use the ",(0,n.jsx)(s.code,{children:"create"})," method to create a new record in a single step:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.create(name: 'John', email: 'john@example.com')\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"create"})," method instantiates a new instance of the model, sets the attributes, and saves it to the database."]}),"\n",(0,n.jsx)(s.h2,{id:"52-updating-records",children:"5.2. Updating Records"}),"\n",(0,n.jsxs)(s.p,{children:["To update an existing record, you can modify its attributes and then call the ",(0,n.jsx)(s.code,{children:"save"})," method to persist the changes."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.find('user_id_123')\nuser.name = 'John Doe'\nuser.save\n"})}),"\n",(0,n.jsx)(s.p,{children:"CouchbaseOrm automatically tracks the changes made to the attributes and updates only the modified fields in the database."}),"\n",(0,n.jsx)(s.h2,{id:"53-saving-records",children:"5.3. Saving Records"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"save"})," method is used to persist a record to the database, whether it's a new record or an existing one with modifications."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.new(name: 'John')\nuser.save # Creates a new record\n\nuser.name = 'John Doe'\nuser.save # Updates the existing record\n"})}),"\n",(0,n.jsxs)(s.p,{children:["If the record is new (i.e., it doesn't have an ID), ",(0,n.jsx)(s.code,{children:"save"})," will create a new document in Couchbase Server. If the record already exists, ",(0,n.jsx)(s.code,{children:"save"})," will update the existing document with the modified attributes."]}),"\n",(0,n.jsx)(s.h2,{id:"54-destroying-records",children:"5.4. Destroying Records"}),"\n",(0,n.jsxs)(s.p,{children:["To delete a record from the database, you can call the ",(0,n.jsx)(s.code,{children:"destroy"})," method on an instance of your model."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.find('user_id_123')\nuser.destroy\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"destroy"})," method removes the corresponding document from Couchbase Server and freezes the model instance to prevent further modifications."]}),"\n",(0,n.jsx)(s.h2,{id:"55-updating-specific-fields",children:"5.5. Updating Specific Fields"}),"\n",(0,n.jsx)(s.p,{children:"CouchbaseOrm provides a way to update specific fields of a record without retrieving the entire document from the database. This can be useful for performance optimization when you only need to update a subset of attributes."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"user = User.find('user_id_123')\nuser.update(name: 'John Doe', age: 30)\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"update"})," method updates only the specified attributes of the record in the database."]}),"\n",(0,n.jsx)(s.h2,{id:"56-callbacks",children:"5.6. Callbacks"}),"\n",(0,n.jsx)(s.p,{children:"As mentioned in the previous section on defining models, CouchbaseOrm supports lifecycle callbacks that allow you to execute code at certain points in a record's persistence lifecycle."}),"\n",(0,n.jsxs)(s.p,{children:["Callbacks can be used to perform actions before or after specific events, such as saving or updating a record. Some commonly used callbacks include ",(0,n.jsx)(s.code,{children:"before_save"}),", ",(0,n.jsx)(s.code,{children:"after_save"}),", ",(0,n.jsx)(s.code,{children:"before_create"}),", ",(0,n.jsx)(s.code,{children:"after_create"}),", ",(0,n.jsx)(s.code,{children:"before_update"}),", ",(0,n.jsx)(s.code,{children:"after_update"}),", ",(0,n.jsx)(s.code,{children:"before_destroy"}),", and ",(0,n.jsx)(s.code,{children:"after_destroy"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  before_save :encrypt_password\n  after_create :send_welcome_email\n\n  private\n\n  def encrypt_password\n    self.password = encrypt(password) if password_changed?\n  end\n\n  def send_welcome_email\n    UserMailer.welcome_email(self).deliver_now\n  end\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["In this example, the ",(0,n.jsx)(s.code,{children:"encrypt_password"})," callback is executed before saving a user record, encrypting the password if it has been changed. The ",(0,n.jsx)(s.code,{children:"send_welcome_email"})," callback is executed after creating a new user record, sending a welcome email to the user."]}),"\n",(0,n.jsx)(s.p,{children:"Callbacks provide a way to encapsulate and reuse common logic related to the persistence lifecycle of your records."})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>o});var n=r(6540);const a={},t=n.createContext(a);function c(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);