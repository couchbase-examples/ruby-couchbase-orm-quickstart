"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7969],{6404:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var n=s(4848),i=s(8453);const c={sidebar_position:4},t="Querying",o={id:"tutorial-ruby-couchbase-orm/querying",title:"Querying",description:"CouchbaseOrm provides a powerful and expressive query interface for retrieving data from Couchbase Server. With CouchbaseOrm, you can easily construct queries using a fluent and intuitive API that resembles the querying capabilities of ActiveRecord.",source:"@site/docs/tutorial-ruby-couchbase-orm/04-querying.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/querying",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/querying",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/04-querying.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Defining Models",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/defining-models"},next:{title:"Persistence",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/persistence"}},a={},d=[{value:"4.1. Finding Records",id:"41-finding-records",level:2},{value:"4.2. Where Clauses",id:"42-where-clauses",level:2},{value:"4.3. Ordering",id:"43-ordering",level:2},{value:"4.4. Limit and Offset",id:"44-limit-and-offset",level:2},{value:"4.5. Scopes",id:"45-scopes",level:2},{value:"4.6. Pluck",id:"46-pluck",level:2},{value:"4.7. Destroy All",id:"47-destroy-all",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"querying",children:"Querying"}),"\n",(0,n.jsx)(r.p,{children:"CouchbaseOrm provides a powerful and expressive query interface for retrieving data from Couchbase Server. With CouchbaseOrm, you can easily construct queries using a fluent and intuitive API that resembles the querying capabilities of ActiveRecord."}),"\n",(0,n.jsx)(r.h2,{id:"41-finding-records",children:"4.1. Finding Records"}),"\n",(0,n.jsx)(r.p,{children:"CouchbaseOrm offers various methods to find records based on different criteria. Here are some commonly used methods:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"find"}),": Finds a record by its primary key (ID)."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"find_by"}),": Finds the first record that matches the specified attribute-value pair."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"where"}),": Retrieves records that match the specified conditions."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Here are some examples of finding records:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Find a user by ID\nuser = User.find('user_id_123')\n\n# Find the first user with a specific email\nuser = User.find_by(email: 'user@example.com')\n\n# Find all active users\nactive_users = User.where(active: true)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"42-where-clauses",children:"4.2. Where Clauses"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"where"})," method allows you to specify conditions to filter the records based on attribute values. You can chain multiple ",(0,n.jsx)(r.code,{children:"where"})," clauses together to build more complex queries."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Find users with a specific name and age greater than 25\nusers = User.where(name: 'John').where('age > ?', 25)\n\n# Find users with an email ending with a specific domain\nusers = User.where('email LIKE ?', '%@example.com')\n"})}),"\n",(0,n.jsxs)(r.p,{children:["CouchbaseOrm supports various comparison operators and placeholders in the ",(0,n.jsx)(r.code,{children:"where"})," clauses, such as ",(0,n.jsx)(r.code,{children:"="}),", ",(0,n.jsx)(r.code,{children:">"}),", ",(0,n.jsx)(r.code,{children:"<"}),", ",(0,n.jsx)(r.code,{children:">="}),", ",(0,n.jsx)(r.code,{children:"<="}),", ",(0,n.jsx)(r.code,{children:"LIKE"}),", and more."]}),"\n",(0,n.jsx)(r.h2,{id:"43-ordering",children:"4.3. Ordering"}),"\n",(0,n.jsxs)(r.p,{children:["You can specify the order in which the retrieved records should be sorted using the ",(0,n.jsx)(r.code,{children:"order"})," method. Pass the attribute name and the desired sort direction (",(0,n.jsx)(r.code,{children:":asc"})," for ascending, ",(0,n.jsx)(r.code,{children:":desc"})," for descending)."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Find users ordered by name in ascending order\nusers = User.order(:name)\n\n# Find users ordered by age in descending order\nusers = User.order(age: :desc)\n"})}),"\n",(0,n.jsxs)(r.p,{children:["You can also chain multiple ",(0,n.jsx)(r.code,{children:"order"})," clauses to sort by multiple attributes."]}),"\n",(0,n.jsx)(r.h2,{id:"44-limit-and-offset",children:"4.4. Limit and Offset"}),"\n",(0,n.jsxs)(r.p,{children:["To limit the number of records returned or to skip a certain number of records, you can use the ",(0,n.jsx)(r.code,{children:"limit"})," and ",(0,n.jsx)(r.code,{children:"offset"})," methods."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Find the first 10 users\nusers = User.limit(10)\n\n# Find users starting from the 11th record\nusers = User.offset(10)\n\n# Find users starting from the 11th record and limit to 10 records\nusers = User.offset(10).limit(10)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"45-scopes",children:"4.5. Scopes"}),"\n",(0,n.jsx)(r.p,{children:"Scopes allow you to define reusable query snippets that can be chained with other query methods. Scopes are defined as class methods within your model."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  scope :active, -> { where(active: true) }\n  scope :adults, -> { where('age >= ?', 18) }\nend\n\n# Find active adult users\nusers = User.active.adults\n"})}),"\n",(0,n.jsx)(r.p,{children:"Scopes provide a clean and DRY way to encapsulate commonly used query conditions."}),"\n",(0,n.jsx)(r.h2,{id:"46-pluck",children:"4.6. Pluck"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"pluck"})," method allows you to retrieve specific attributes from the matched records instead of loading the entire objects. It returns an array of values for the specified attributes."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Retrieve the names of all users\nnames = User.pluck(:name)\n\n# Retrieve the names and emails of active users\nname_emails = User.active.pluck(:name, :email)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"47-destroy-all",children:"4.7. Destroy All"}),"\n",(0,n.jsxs)(r.p,{children:["To delete multiple records that match specific conditions, you can use the ",(0,n.jsx)(r.code,{children:"destroy_all"})," method."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Delete all inactive users\nUser.where(active: false).destroy_all\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Be cautious when using ",(0,n.jsx)(r.code,{children:"destroy_all"})," as it permanently deletes the matched records from the database."]}),"\n",(0,n.jsx)(r.p,{children:"These are just a few examples of the querying capabilities provided by CouchbaseOrm. You can combine these methods in various ways to construct complex and specific queries based on your application's requirements."}),"\n",(0,n.jsx)(r.p,{children:"In the next section, we'll explore how to use CouchbaseOrm to create, update, and delete records in Couchbase Server."})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>o});var n=s(6540);const i={},c=n.createContext(i);function t(e){const r=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(c.Provider,{value:r},e.children)}}}]);