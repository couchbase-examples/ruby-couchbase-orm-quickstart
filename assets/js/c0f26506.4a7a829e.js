"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5907],{3231:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Tutorial - Ruby Couchbase ORM","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/introduction","docId":"tutorial-ruby-couchbase-orm/introduction","unlisted":false},{"type":"link","label":"Installation","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/installation","docId":"tutorial-ruby-couchbase-orm/installation","unlisted":false},{"type":"link","label":"Defining Models","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/defining-models","docId":"tutorial-ruby-couchbase-orm/defining-models","unlisted":false},{"type":"link","label":"Querying","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/querying","docId":"tutorial-ruby-couchbase-orm/querying","unlisted":false},{"type":"link","label":"Persistence","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/persistence","docId":"tutorial-ruby-couchbase-orm/persistence","unlisted":false},{"type":"link","label":"Associations and Validations","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/associations-and-validations","docId":"tutorial-ruby-couchbase-orm/associations-and-validations","unlisted":false},{"type":"link","label":"N1QL Queries","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/n1ql-queries","docId":"tutorial-ruby-couchbase-orm/n1ql-queries","unlisted":false},{"type":"link","label":"Views","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/views","docId":"tutorial-ruby-couchbase-orm/views","unlisted":false},{"type":"link","label":"Nested Documents","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/embedded-documents","docId":"tutorial-ruby-couchbase-orm/embedded-documents","unlisted":false},{"type":"link","label":"Enums","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/enums","docId":"tutorial-ruby-couchbase-orm/enums","unlisted":false},{"type":"link","label":"Encryption","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/encryption","docId":"tutorial-ruby-couchbase-orm/encryption","unlisted":false},{"type":"link","label":"Logging","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/logging","docId":"tutorial-ruby-couchbase-orm/logging","unlisted":false},{"type":"link","label":"Testing","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/testing","docId":"tutorial-ruby-couchbase-orm/testing","unlisted":false},{"type":"link","label":"Advanced Topics","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/advanced-topics","docId":"tutorial-ruby-couchbase-orm/advanced-topics","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/troubleshooting","docId":"tutorial-ruby-couchbase-orm/troubleshooting","unlisted":false},{"type":"link","label":"API Reference","href":"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/api-reference","docId":"tutorial-ruby-couchbase-orm/api-reference","unlisted":false}],"href":"/ruby-couchbase-orm-quickstart/docs/category/tutorial---ruby-couchbase-orm"}]},"docs":{"tutorial-ruby-couchbase-orm/advanced-topics":{"id":"tutorial-ruby-couchbase-orm/advanced-topics","title":"Advanced Topics","description":"In this section, we\'ll explore some advanced topics in CouchbaseOrm, including transactions, concurrency, error handling, and extending CouchbaseOrm.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/api-reference":{"id":"tutorial-ruby-couchbase-orm/api-reference","title":"API Reference","description":"This section provides a comprehensive reference of the CouchbaseOrm API, including the main classes, methods, and options available in the library. Use this reference as a quick guide to understand the functionality and usage of different parts of CouchbaseOrm.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/associations-and-validations":{"id":"tutorial-ruby-couchbase-orm/associations-and-validations","title":"Associations and Validations","description":"6. Associations","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/defining-models":{"id":"tutorial-ruby-couchbase-orm/defining-models","title":"Defining Models","description":"In CouchbaseOrm, models are defined as Ruby classes that inherit from CouchbaseOrm::Base. Each model represents a document type in Couchbase Server and encapsulates the data and behavior of the objects in your application.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/embedded-documents":{"id":"tutorial-ruby-couchbase-orm/embedded-documents","title":"Nested Documents","description":"CouchbaseOrm supports nested documents, which allow you to store complex, hierarchical data structures within a single Couchbase document. Nested documents are useful when you have related data that you want to store together with the parent document for performance or consistency reasons.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/encryption":{"id":"tutorial-ruby-couchbase-orm/encryption","title":"Encryption","description":"CouchbaseOrm provides built-in support for encrypting sensitive data stored in your Couchbase documents. Encryption allows you to protect confidential information, such as personal data or financial details, by encrypting the values before storing them in the database and decrypting them when retrieving the data.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/enums":{"id":"tutorial-ruby-couchbase-orm/enums","title":"Enums","description":"CouchbaseOrm provides support for enums, which allow you to define a fixed set of values for an attribute. Enums are useful when you have a limited number of possible values for a particular attribute and want to ensure data consistency and validity.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/installation":{"id":"tutorial-ruby-couchbase-orm/installation","title":"Installation","description":"Installing Couchbase ORM is a straightforward process. In this section, we\'ll guide you through the prerequisites and the step-by-step installation procedure.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/introduction":{"id":"tutorial-ruby-couchbase-orm/introduction","title":"Introduction","description":"Welcome to the documentation for Couchbase ORM, a powerful Object-Relational Mapping (ORM) library for Ruby that simplifies interactions with Couchbase Server. This guide will walk you through the features and usage of Couchbase ORM, helping you build efficient and scalable Ruby applications with Couchbase.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/logging":{"id":"tutorial-ruby-couchbase-orm/logging","title":"Logging","description":"CouchbaseOrm provides a logging mechanism to help you monitor and debug your application. Logging allows you to capture important events, errors, and information during the execution of your application. CouchbaseOrm integrates with the logging framework used in your Ruby application, such as the built-in Logger class or third-party logging libraries.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/n1ql-queries":{"id":"tutorial-ruby-couchbase-orm/n1ql-queries","title":"N1QL Queries","description":"CouchbaseOrm provides support for executing N1QL queries directly from your Ruby code. N1QL (Non-First Normal Form Query Language) is a powerful query language that allows you to perform complex queries and aggregations on your Couchbase data.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/persistence":{"id":"tutorial-ruby-couchbase-orm/persistence","title":"Persistence","description":"CouchbaseOrm provides a simple and intuitive way to persist data to Couchbase Server. With CouchbaseOrm, you can easily create, update, save, and destroy records using a set of built-in methods.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/querying":{"id":"tutorial-ruby-couchbase-orm/querying","title":"Querying","description":"CouchbaseOrm provides a powerful and expressive query interface for retrieving data from Couchbase Server. With CouchbaseOrm, you can easily construct queries using a fluent and intuitive API that resembles the querying capabilities of ActiveRecord.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/testing":{"id":"tutorial-ruby-couchbase-orm/testing","title":"Testing","description":"Testing is an essential part of developing robust and maintainable applications. CouchbaseOrm provides support for testing your models and queries to ensure they behave as expected. In this section, we\'ll explore how to set up and write tests for your CouchbaseOrm-based application.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/troubleshooting":{"id":"tutorial-ruby-couchbase-orm/troubleshooting","title":"Troubleshooting","description":"When working with CouchbaseOrm, you may encounter various issues or errors. In this section, we\'ll discuss common problems and provide troubleshooting tips to help you identify and resolve these issues effectively.","sidebar":"tutorialSidebar"},"tutorial-ruby-couchbase-orm/views":{"id":"tutorial-ruby-couchbase-orm/views","title":"Views","description":"CouchbaseOrm provides support for using views to query and index your data. Views are a powerful feature of Couchbase Server that allow you to define custom map-reduce functions to extract, filter, and aggregate your data.","sidebar":"tutorialSidebar"}}}}')}}]);