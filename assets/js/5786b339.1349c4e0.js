"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[224],{2297:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>u,toc:()=>d});var i=n(4848),t=n(8453);const a={},r="Enums",u={id:"tutorial-ruby-couchbase-orm/enums",title:"Enums",description:"CouchbaseOrm provides support for enums, which allow you to define a fixed set of values for an attribute. Enums are useful when you have a limited number of possible values for a particular attribute and want to ensure data consistency and validity.",source:"@site/docs/tutorial-ruby-couchbase-orm/10-enums.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/enums",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/enums",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/10-enums.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Nested Documents",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/nested-documents"},next:{title:"Encryption",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/encryption"}},c={},d=[{value:"10.1. Defining Enums",id:"101-defining-enums",level:2},{value:"10.2. Using Enums",id:"102-using-enums",level:2},{value:"10.3. Querying by Enums",id:"103-querying-by-enums",level:2},{value:"10.4. Enum Mapping",id:"104-enum-mapping",level:2},{value:"10.5. Enum Validation",id:"105-enum-validation",level:2},{value:"10.6. Enum Defaults",id:"106-enum-defaults",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"enums",children:"Enums"}),"\n",(0,i.jsx)(s.p,{children:"CouchbaseOrm provides support for enums, which allow you to define a fixed set of values for an attribute. Enums are useful when you have a limited number of possible values for a particular attribute and want to ensure data consistency and validity."}),"\n",(0,i.jsx)(s.h2,{id:"101-defining-enums",children:"10.1. Defining Enums"}),"\n",(0,i.jsxs)(s.p,{children:["To define an enum in your model, you can use the ",(0,i.jsx)(s.code,{children:"enum"})," class method provided by CouchbaseOrm."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  enum status: [:active, :inactive, :suspended]\nend\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, we define an enum named ",(0,i.jsx)(s.code,{children:"status"})," for the ",(0,i.jsx)(s.code,{children:"User"})," model. The enum has three possible values: ",(0,i.jsx)(s.code,{children:":active"}),", ",(0,i.jsx)(s.code,{children:":inactive"}),", and ",(0,i.jsx)(s.code,{children:":suspended"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"CouchbaseOrm automatically generates a set of methods for each enum value:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"active?"}),": Returns ",(0,i.jsx)(s.code,{children:"true"})," if the ",(0,i.jsx)(s.code,{children:"status"})," is ",(0,i.jsx)(s.code,{children:":active"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"inactive?"}),": Returns ",(0,i.jsx)(s.code,{children:"true"})," if the ",(0,i.jsx)(s.code,{children:"status"})," is ",(0,i.jsx)(s.code,{children:":inactive"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"suspended?"}),": Returns ",(0,i.jsx)(s.code,{children:"true"})," if the ",(0,i.jsx)(s.code,{children:"status"})," is ",(0,i.jsx)(s.code,{children:":suspended"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"active!"}),": Sets the ",(0,i.jsx)(s.code,{children:"status"})," to ",(0,i.jsx)(s.code,{children:":active"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"inactive!"}),": Sets the ",(0,i.jsx)(s.code,{children:"status"})," to ",(0,i.jsx)(s.code,{children:":inactive"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"suspended!"}),": Sets the ",(0,i.jsx)(s.code,{children:"status"})," to ",(0,i.jsx)(s.code,{children:":suspended"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"102-using-enums",children:"10.2. Using Enums"}),"\n",(0,i.jsx)(s.p,{children:"You can assign enum values to an attribute using the generated methods or by directly assigning the value."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'user = User.new\nuser.status = :active\nuser.save\n\nuser.suspended!\nuser.save\n\nputs user.status  # Output: "suspended"\nputs user.active? # Output: false\n'})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, we create a new ",(0,i.jsx)(s.code,{children:"User"})," instance and set the ",(0,i.jsx)(s.code,{children:"status"})," to ",(0,i.jsx)(s.code,{children:":active"})," using the direct assignment. We then change the ",(0,i.jsx)(s.code,{children:"status"})," to ",(0,i.jsx)(s.code,{children:":suspended"})," using the generated ",(0,i.jsx)(s.code,{children:"suspended!"})," method."]}),"\n",(0,i.jsx)(s.h2,{id:"103-querying-by-enums",children:"10.3. Querying by Enums"}),"\n",(0,i.jsx)(s.p,{children:"CouchbaseOrm allows you to query records based on their enum values."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"active_users = User.where(status: :active)\nsuspended_users = User.where(status: :suspended)\n"})}),"\n",(0,i.jsxs)(s.p,{children:["These queries retrieve users with the ",(0,i.jsx)(s.code,{children:"status"})," enum set to ",(0,i.jsx)(s.code,{children:":active"})," and ",(0,i.jsx)(s.code,{children:":suspended"}),", respectively."]}),"\n",(0,i.jsx)(s.h2,{id:"104-enum-mapping",children:"10.4. Enum Mapping"}),"\n",(0,i.jsx)(s.p,{children:"Behind the scenes, CouchbaseOrm maps the enum values to integers for storage in the database. By default, the mapping starts from 0 and increments by 1 for each enum value in the order they are defined."}),"\n",(0,i.jsx)(s.p,{children:"However, you can customize the mapping by providing a hash of enum values and their corresponding integer values."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  enum status: { active: 1, inactive: 2, suspended: 3 }\nend\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, we explicitly define the mapping of enum values to integers. The ",(0,i.jsx)(s.code,{children:":active"})," value is mapped to 1, ",(0,i.jsx)(s.code,{children:":inactive"})," to 2, and ",(0,i.jsx)(s.code,{children:":suspended"})," to 3."]}),"\n",(0,i.jsx)(s.h2,{id:"105-enum-validation",children:"10.5. Enum Validation"}),"\n",(0,i.jsx)(s.p,{children:"CouchbaseOrm automatically validates that the assigned enum value is one of the defined values for the enum."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'user = User.new\nuser.status = :invalid\nuser.save # Raises an error: "Invalid enum value: :invalid"\n'})}),"\n",(0,i.jsx)(s.p,{children:"If you try to assign an invalid value to an enum attribute, CouchbaseOrm will raise an error indicating that the value is not a valid enum value."}),"\n",(0,i.jsx)(s.h2,{id:"106-enum-defaults",children:"10.6. Enum Defaults"}),"\n",(0,i.jsxs)(s.p,{children:["You can specify a default value for an enum attribute using the ",(0,i.jsx)(s.code,{children:"default"})," option."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  enum status: [:active, :inactive, :suspended], default: :active\nend\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, if no value is assigned to the ",(0,i.jsx)(s.code,{children:"status"})," attribute when creating a new ",(0,i.jsx)(s.code,{children:"User"})," instance, the default value of ",(0,i.jsx)(s.code,{children:":active"})," will be used."]}),"\n",(0,i.jsx)(s.p,{children:"Enums in CouchbaseOrm provide a convenient way to define a fixed set of values for an attribute. They help ensure data consistency, improve code readability, and simplify querying and validation."}),"\n",(0,i.jsx)(s.p,{children:"When using enums, consider the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Enums are stored as integers in the database, so be cautious when changing the order or removing enum values, as it may affect existing records."}),"\n",(0,i.jsxs)(s.li,{children:["Enums are case-sensitive, so ",(0,i.jsx)(s.code,{children:":active"})," and ",(0,i.jsx)(s.code,{children:":Active"})," are considered different values."]}),"\n",(0,i.jsxs)(s.li,{children:["Enums can be used in combination with other attribute types, such as ",(0,i.jsx)(s.code,{children:"default"})," and ",(0,i.jsx)(s.code,{children:"validates"}),", to further customize the behavior of the attribute."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"In the next section, we'll explore how to use encryption in CouchbaseOrm to secure sensitive data stored in your Couchbase documents."})]})}function l(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>u});var i=n(6540);const t={},a=i.createContext(t);function r(e){const s=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function u(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:s},e.children)}}}]);