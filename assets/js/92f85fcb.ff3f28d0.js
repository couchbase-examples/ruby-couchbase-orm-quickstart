"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[702],{2573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(4848),r=n(8453);const o={},a="Views (aka Map/Reduce indexes)",i={id:"tutorial-ruby-couchbase-orm/views",title:"Views (aka Map/Reduce indexes)",description:"Views are defined in the model and typically just emit an attribute that",source:"@site/docs/tutorial-ruby-couchbase-orm/08-views.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/views",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/views",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/08-views.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL++ (formerly N1QL) Queries",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/sqlpp-queries"},next:{title:"Nested Documents",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/nested-documents"}},u={},c=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"views-aka-mapreduce-indexes",children:"Views (aka Map/Reduce indexes)"}),"\n",(0,s.jsx)(t.p,{children:"Views are defined in the model and typically just emit an attribute that\ncan then be used for filtering results or ordering."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"    class Comment < CouchbaseOrm::Base\n      attribute :author :string\n      attribute :body, :string\n      view :all # => emits :id and will return all comments\n      view :by_author, emit_key: :author\n\n      # Generates two functions:\n      # * the by_author view above\n      # * def find_by_author(author); end\n      index_view :author\n\n      # You can make compound keys by passing an array to :emit_key\n      # this allow to query by read/unread comments\n      view :by_read, emit_key: [:user_id, :read]\n      # this allow to query by view_count\n      view :by_view_count, emit_key: [:user_id, :view_count]\n\n      validates_presence_of :author, :body\n    end\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.code,{children:"Comment.find_by_author('name')"})," to obtain all the comments by\na particular author. The same thing, using the view directly would be:\n",(0,s.jsx)(t.code,{children:"Comment.by_author(key: 'name')"})]}),"\n",(0,s.jsx)(t.p,{children:"When using a compound key, the usage is the same, you just give the full key :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"   Comment.by_read(key: '[\"'+user_id+'\",false]') # gives all unread comments for one particular user\n\n   # or even a range !\n\n   Comment.by_view_count(startkey: '[\"'+user_id+'\",10]', endkey: '[\"'+user_id+'\",20]') \n   \n   # gives all comments that have been seen more than 10 times but less than 20\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Ex : Compound keys allows to decide the order of the results, and you can reverse it by passing ",(0,s.jsx)(t.code,{children:"descending: true"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"    class Comment < CouchbaseOrm::Base19\n      self.ignored_properties = [:old_name] # ignore old_name property in the model\n      self.properties_always_exists_in_document = true # use is null for nil value instead of not valued for performance purpose, only possible if all properties always exists in document\n    end\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can specify ",(0,s.jsx)(t.code,{children:"properties_always_exists_in_document"})," to true if all properties always exists in document, this will allow to use ",(0,s.jsx)(t.code,{children:"is null"})," instead of ",(0,s.jsx)(t.code,{children:"not valued"})," for nil value, this will improve performance."]}),"\n",(0,s.jsx)(t.p,{children:"WARNING: If a document exists without a property, the query will failed! So you must be sure that all documents have all properties."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);