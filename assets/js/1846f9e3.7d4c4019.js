"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[341],{2770:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>d});var a=t(4848),r=t(8453);const n={},c="Persistence",i={id:"tutorial-ruby-couchbase-orm/persistence",title:"Persistence",description:"CouchbaseOrm provides a simple and intuitive way to persist data to Couchbase Server. With CouchbaseOrm, you can easily create, update, save, and destroy records using a set of built-in methods.",source:"@site/docs/tutorial-ruby-couchbase-orm/05-persistence.md",sourceDirName:"tutorial-ruby-couchbase-orm",slug:"/tutorial-ruby-couchbase-orm/persistence",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/persistence",draft:!1,unlisted:!1,editUrl:"https://github.com/couchbase-examples/ruby-couchbase-orm-quickstart/tree/docs/docusaurus/docusaurus/docs/docs/tutorial-ruby-couchbase-orm/05-persistence.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Querying",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/querying"},next:{title:"Associations and Validations",permalink:"/ruby-couchbase-orm-quickstart/docs/tutorial-ruby-couchbase-orm/associations-and-validations"}},o={},d=[{value:"5.1. Creating Records",id:"51-creating-records",level:2},{value:"5.2. Saving Records",id:"52-saving-records",level:2},{value:"5.3. Updating Records",id:"53-updating-records",level:2},{value:"5.4. Destroying Records",id:"54-destroying-records",level:2},{value:"5.5. Callbacks",id:"55-callbacks",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"persistence",children:"Persistence"}),"\n",(0,a.jsx)(s.p,{children:"CouchbaseOrm provides a simple and intuitive way to persist data to Couchbase Server. With CouchbaseOrm, you can easily create, update, save, and destroy records using a set of built-in methods."}),"\n",(0,a.jsx)(s.h2,{id:"51-creating-records",children:"5.1. Creating Records"}),"\n",(0,a.jsxs)(s.p,{children:["To create a new record, you can instantiate a new instance of your model class and then call the ",(0,a.jsx)(s.code,{children:"save"})," method to persist it to the database."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class Task < CouchbaseOrm::Base\n  attribute :title, :string\n  attribute :description, :string\n  attribute :completed, :boolean, default: false\nend\n\ntask1 = Task.new(title: 'Task 1', description: 'Description of Task 1')\ntask1.save\nputs \"Task 1 created with id: #{task1.id}, #{task1.inspect}\"\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Alternatively, you can use the ",(0,a.jsx)(s.code,{children:"create"})," method to create a new record in a single step:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"task1 = Task.create(title: 'Task 1', description: 'Description of Task 1')\n"})}),"\n",(0,a.jsx)(s.p,{children:"Output of the above code:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'Task 1 created with id: task-1-tLJM721QY, #<Task id: "task-1-tLJM721QY", title: "Task 1", description: "Description of Task 1", completed: false>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"create"})," method instantiates a new instance of the model, sets the attributes, and saves it to the database."]}),"\n",(0,a.jsx)(s.h2,{id:"52-saving-records",children:"5.2. Saving Records"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"save"})," method is used to persist a record to the database, whether it's a new record or an existing one with modifications."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"# Update an existing task\ntask2 = Task.create(title: 'Task 2', description: 'Description of Task 2')\ntask2.description = 'Updated description of Task 2'\ntask2.save\nputs \"Task 2 updated with id: #{task2.id}, #{task2.inspect}\"\n"})}),"\n",(0,a.jsx)(s.p,{children:"Output of the above code:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'Task 2 updated with id: task-1-tLJM895Xq, #<Task id: "task-1-tLJM895Xq", title: "Task 2", description: "Updated description of Task 2", completed: false>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["If the record is new (i.e., it doesn't have an ID), ",(0,a.jsx)(s.code,{children:"save"})," will create a new document in Couchbase Server. If the record already exists, ",(0,a.jsx)(s.code,{children:"save"})," will update the existing document with the modified attributes."]}),"\n",(0,a.jsx)(s.h2,{id:"53-updating-records",children:"5.3. Updating Records"}),"\n",(0,a.jsxs)(s.p,{children:["To update an existing record, you can modify its attributes and then call the ",(0,a.jsx)(s.code,{children:"save"})," method to persist the changes."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"# Update specific fields of a task\ntask3 = Task.create(title: 'Task 3', description: 'Description of Task 3')\ntask3.update(description: 'Updated description of Task 3', completed: true)\nputs \"Task 3 updated with id: #{task3.id}, #{task3.inspect}\"\n"})}),"\n",(0,a.jsx)(s.p,{children:"Output of the above code:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'Task 3 updated with id: task-1-tLJMA6cBp, #<Task id: "task-1-tLJMA6cBp", title: "Task 3", description: "Updated description of Task 3", completed: true>\n'})}),"\n",(0,a.jsx)(s.p,{children:"CouchbaseOrm automatically tracks the changes made to the attributes and updates only the modified fields in the database."}),"\n",(0,a.jsx)(s.h2,{id:"54-destroying-records",children:"5.4. Destroying Records"}),"\n",(0,a.jsxs)(s.p,{children:["To delete a record from the database, you can call the ",(0,a.jsx)(s.code,{children:"destroy"})," method on an instance of your model."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"user = User.find('user_id_123')\nuser.destroy\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"destroy"})," method removes the corresponding document from Couchbase Server and freezes the model instance to prevent further modifications."]}),"\n",(0,a.jsx)(s.h2,{id:"55-callbacks",children:"5.5. Callbacks"}),"\n",(0,a.jsx)(s.p,{children:"As mentioned in the previous section on defining models, CouchbaseOrm supports lifecycle callbacks that allow you to execute code at certain points in a record's persistence lifecycle."}),"\n",(0,a.jsxs)(s.p,{children:["Callbacks can be used to perform actions before or after specific events, such as saving or updating a record. Some commonly used callbacks include ",(0,a.jsx)(s.code,{children:"before_save"}),", ",(0,a.jsx)(s.code,{children:"after_save"}),", ",(0,a.jsx)(s.code,{children:"before_create"}),", ",(0,a.jsx)(s.code,{children:"after_create"}),", ",(0,a.jsx)(s.code,{children:"before_update"}),", ",(0,a.jsx)(s.code,{children:"after_update"}),", ",(0,a.jsx)(s.code,{children:"before_destroy"}),", and ",(0,a.jsx)(s.code,{children:"after_destroy"}),"."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class User < CouchbaseOrm::Base\n  before_save :encrypt_password\n  after_create :send_welcome_email\n\n  private\n\n  def encrypt_password\n    self.password = encrypt(password) if password_changed?\n  end\n\n  def send_welcome_email\n    UserMailer.welcome_email(self).deliver_now\n  end\nend\n"})}),"\n",(0,a.jsxs)(s.p,{children:["In this example, the ",(0,a.jsx)(s.code,{children:"encrypt_password"})," callback is executed before saving a user record, encrypting the password if it has been changed. The ",(0,a.jsx)(s.code,{children:"send_welcome_email"})," callback is executed after creating a new user record, sending a welcome email to the user."]}),"\n",(0,a.jsx)(s.p,{children:"Callbacks provide a way to encapsulate and reuse common logic related to the persistence lifecycle of your records."})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>i});var a=t(6540);const r={},n=a.createContext(r);function c(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);